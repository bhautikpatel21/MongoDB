// for show all database
show dbs;

// create & use database
use student

// for delete daabase
db.dropDatabase();

// for show tables
show collections;

// create collection
db.createCollection ("student");

// for drop collections
db.student.drop();

// insert one 
db.student.insertOne({
    name: "John",
    age:20,
    email:"John@test.in",
    hobbies: ["sport","Dancing"],
    address:{
        line1:'208,city-center',
        line2:'Yogichowk',
        city:'surat',
        state:'Gujarat',
        country:'India',
        pincode:395010
    }
});

// insert many 
db.student.insertMany([
    {
        name: "smith",
        age: 22,
        email: "smith@test.in",
        subjects: ["Maths","science"],
    },
    {
        name: "Prerak",
        gender: 'male',
        email: "prerak@test.in",
        subjects:{
            maths: 50,
            sci: 30,
            eng: 33
        },
    },
    {
        name: "Braham",
        gender: 'male',
        age: 26,
        subjects:{
            maths: 20,
            sci: 30,
            eng: 33
        },
    },
]);

// for find table
bd.student.find();


// show student tables all data
db.student.find()


db.student.findOne({name: "Braham"})
db.student.findmany({name: "Braham"})

// limit 
da.student.find().limit(2)


-------------------------------------
==>  || Comparisopn Operators || <==
------------------------------------

db.books.find({});

db.books.find({"pages" : {$eq: 384}})
db.books.find({"pages" : {$ne: 384}})

db.books.find({"pages" : {$lt: 320}})
db.books.find({"pages" : {$lte: 320}})

db.books.find({"pages" : {$gt: 505}})
db.books.find({"pages" : {$gte: 505}})

db.books.find({"pages" : {$in : [320,505,928]}})
db.books.find({"pages" : {$nin : [320,505,928]}})

db.books.find({$and: [{"pages" : {$eq: 384}},{"year" : 1350}]})

db.books.find({$or: [{"pages" : {$eq: 384}},{"year" : {$in: [1350,81846,1958]}}]})

db.books.find({$nor:[{"pages" : {$eq:384}},{"year" : {$in: [1315,1836,1958]}}]})

db.books.find({"pages " :{$not: {$lte: 384}}})


// return count
db.books.find({"pages " :{$not: {$lte: 384}}}).count();


// cursor methods
count() // return count
limit()  // set limit
skip() // for skip data
sort() // for sorting


// logical oparator 
// $and
db.product.find({$and : [{'price' : {$gt : 100}},{'name' : 'Dimand ring'}] })

// $or
db.product.find({$or : [{'price' : {$gt : 100}},{'name' : 'Dimand ring'}] })

// $nor
db.product.find({$nor : [{'price' : {$gt : 100}},{'name' : 'Dimand ring'}] })

// not 
db.product.find({$not : [{'price' : {$gt : 100}},{'name' : 'Dimand ring'}] })


// update method 
// update one 
db.product.updateOne({name : 'watch'},{$set: {'price : 3000'}});

// update many
db.product.updateMany({name : 'watch'},{$set: {'price : 3000'}});

// rename 
db.product.updateMany({price : 300},{$rename : {'fullname' : 'Fullname'}})


// aggregation
https://www.mongodb.com/docs/v6.0/reference/operator/aggregation/group/#considerations

// $match
// return all data that name is bhautik 
db.products.aggregate([ {$match : {'name' : 'Bhautik'}} ])

db.products.aggregate([ {$match : {'price' : {$gt : 1250}}} ])

// group 
db.products.aggregate([ 
    {
        $group : {
        _id : "$company",
        totalProducts : {$sum : 1}
        }
    }
 ]);

////////////////////////

db.products.aggregate([ 
    {
        $group : {
        _id : "$company",
        totalProducts : {$sum : "$price"}
        }
    }
 ]);

///////////////////////

db.products.aggregate([ 
    {
        $match : {price : {$gt : 900}}
    },
    {
        $group : {
        _id : "$company",
        totalProducts : {$sum : "$price"}
        }
    }
 ]);


////////////////////////

// sorting 
// $sort 

db.products.aggregate([ 
    {
        $match : {price : {$gt : 1200}}
    },
    {
        $group : {
        _id : "$category",
        totalProducts : {$sum : "$price"}
        }
    }
    {
        $sort : {totalPrice : 1}
    }
 ]);

////////////////////////

// $project 

db.products.aggregate([
    {
        $project : {
            price : 1
        }
    }
])

////////////////////////

db.products.aggregate([
    {
        $project : {
            price : 1,
            _id : 0
        }
    }
])

////////////////////////

$push 

db.products.aggregate([
    {
        $match : {price : {$gt : 1200}}
    },
    {
        $group : {
            _id : '$price',
            alllColors : {$push : '$colors'}
        }
    }
])
